---
// formulario.astro
import MainLayout from "@/layouts/MainLayout.astro";
---

<MainLayout>
  <section class="mx-auto max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14 2xl:max-w-full">
    <h2 class="text-2xl font-bold text-neutral-800 dark:text-neutral-200 md:text-4xl md:leading-tight">
      Únete a la Lista de Espera
    </h2>

    <!-- Formulario de solicitud de servicio -->
    <form id="waitlist-form" class="mt-6 space-y-4">
      <div>
        <label for="name" class="block text-sm font-medium text-neutral-700 dark:text-neutral-300">
          Nombre completo
        </label>
        <input
          type="text"
          id="name"
          name="name"
          required
          class="mt-1 block w-full rounded-md border border-neutral-300 p-2 shadow-sm focus:border-yellow-500 focus:ring-yellow-500 dark:border-neutral-600 dark:bg-neutral-800 dark:text-neutral-200"
        />
      </div>

      <div>
        <label for="business" class="block text-sm font-medium text-neutral-700 dark:text-neutral-300">
          Nombre del negocio
        </label>
        <input
          type="text"
          id="business"
          name="business"
          required
          class="mt-1 block w-full rounded-md border border-neutral-300 p-2 shadow-sm focus:border-yellow-500 focus:ring-yellow-500 dark:border-neutral-600 dark:bg-neutral-800 dark:text-neutral-200"
        />
      </div>

      <div>
        <label for="phone" class="block text-sm font-medium text-neutral-700 dark:text-neutral-300">
          Número de teléfono
        </label>
        <input
          type="tel"
          id="phone"
          name="phone"
          required
          class="mt-1 block w-full rounded-md border border-neutral-300 p-2 shadow-sm focus:border-yellow-500 focus:ring-yellow-500 dark:border-neutral-600 dark:bg-neutral-800 dark:text-neutral-200"
        />
      </div>

      <div>
        <label for="email" class="block text-sm font-medium text-neutral-700 dark:text-neutral-300">
          Correo electrónico
        </label>
        <input
          type="email"
          id="email"
          name="email"
          required
          class="mt-1 block w-full rounded-md border border-neutral-300 p-2 shadow-sm focus:border-yellow-500 focus:ring-yellow-500 dark:border-neutral-600 dark:bg-neutral-800 dark:text-neutral-200"
        />
      </div>

      <button
        type="submit"
        class="w-full rounded-md bg-yellow-500 px-4 py-2 text-sm font-medium text-white hover:bg-yellow-600 focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-2 dark:bg-yellow-600 dark:hover:bg-yellow-700"
      >
        Unirse a la lista de espera
      </button>
    </form>

    <!-- Mensaje de éxito o error -->
    <div id="message" class="mt-4 hidden text-center dark:text-neutral-200"></div>

    <!-- Lista de clientes en espera -->
    <div id="waitlist" class="mt-8">
      <h3 class="text-xl font-bold text-neutral-800 dark:text-neutral-200">Clientes en la Lista de Espera</h3>
      <ul id="waitlist-list" class="mt-4 space-y-2"></ul>
    </div>
  </section>

  <!-- Script para manejar el envío del formulario y cargar la lista de clientes -->
  <script>
    // Define la URL base de la API usando una variable de entorno
    
    // Define la interfaz para el tipo de cliente
    interface Client {
      business: string;
    }
 
    // Define la URL base de la API
    const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || "http://localhost:3001/api";

async function loadWaitlist() {
  try {
    const response = await fetch(`${API_BASE_URL}/waitlist`);
    console.log("Respuesta del servidor:", response);

    if (response.ok) {
      const result = await response.json();
      console.log("Datos recibidos:", result);

      const waitlistList = document.getElementById("waitlist-list");

          if (waitlistList) {
            // Accede a result.data, que es el array de clientes
            waitlistList.innerHTML = result.data.map((client: Client) => `
              <li class="dark:text-neutral-200">${client.business}</li>
            `).join("");
          } else {
            console.error("El elemento 'waitlist-list' no fue encontrado en el DOM.");
          }
        } else {
          console.error("Error al cargar la lista de espera");
        }
      } catch (error) {
        console.error("Error:", error);
      }
    }

    // Cargar la lista de clientes al cargar la página
document.addEventListener("DOMContentLoaded", loadWaitlist);

// Obtén el formulario por su ID
const form = document.getElementById("waitlist-form");

// Verifica que el formulario exista antes de agregar el event listener
if (form) {
  form.addEventListener("submit", async (e) => {
    e.preventDefault(); // Evita que el formulario se envíe de forma tradicional

    // Verifica que el target del evento sea un formulario válido
    if (!e.target || !(e.target instanceof HTMLFormElement)) {
      console.error("El formulario no es válido.");
      return;
    }

    // Obtiene los datos del formulario
    const formData = new FormData(e.target);
    const data = Object.fromEntries(formData.entries()); // Convierte los datos a un objeto

    try {
      // Envía los datos a la API
      const response = await fetch(`${API_BASE_URL}/waitlist`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data), // Convierte los datos a JSON
      });

      // Obtiene el elemento del mensaje
      const messageElement = document.getElementById("message");
      if (!messageElement) {
        console.error("El elemento del mensaje no fue encontrado.");
        return;
      }

      if (response.ok) {
        // Muestra un mensaje de éxito
        messageElement.textContent = "¡Gracias por unirte a la lista de espera!";
        messageElement.classList.remove("hidden");
        messageElement.classList.add("text-green-600");

        // Limpia el formulario
        e.target.reset();

        // Recarga la lista de clientes
        loadWaitlist();
      } else {
        // Muestra un mensaje de error
        messageElement.textContent = "Hubo un error al enviar el formulario. Inténtalo de nuevo.";
        messageElement.classList.remove("hidden");
        messageElement.classList.add("text-red-600");
      }
    } catch (error) {
      console.error("Error:", error);

      // Muestra un mensaje de error en caso de excepción
      const messageElement = document.getElementById("message");
      if (messageElement) {
        messageElement.textContent = "Hubo un error al enviar el formulario. Inténtalo de nuevo.";
        messageElement.classList.remove("hidden");
        messageElement.classList.add("text-red-600");
      }
    }
  });
} else {
  console.error("El formulario no fue encontrado.");
}
  </script>
</MainLayout>